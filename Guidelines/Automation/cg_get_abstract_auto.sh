
###############################################################
# Author: Samet Keserci
# Usage : sh /pardidata1/CG/CG_ABSTRACT_EXTRACTOR/cg_get_abstract_auto.sh
# Title: 2-Step Abstract Extracter
# Created: 10/01/2016
# Modified: 11/21/2016, Samet Keserci, revised wrt to new schema plan
#           03/20/2017, Samet Keserci, revised according to migration from dev2 to dev3
#
# Summary: Aim is to get abstracts using pmid which are mapped by clinical guidelins uid.
#         1. Step: using nbci/eutils API:
#         2. Step: using wos_pmid_mapping and wos_abstracts tables
################################################################
date

echo Change the directory
cd /pardidata1/CG/CG_ABSTRACT_EXTRACTOR/

echo  cg_uid_pmid_mapping is converted into a txt file as an input to Java Application for abstract harvesting
psql -d pardi -c "\copy cg_uid_pmid_mapping to '/pardidata1/CG/CG_ABSTRACT_EXTRACTOR/cg_uid_pmid.csv' with delimiter ',' csv header;"
chmod 775 cg_uid_pmid.csv
mv cg_uid_pmid.csv cg_uid_pmid.txt

echo  the Java Application is running to get abstracts using eutils API...
javac PmidToAbstract.java
chmod 775 PmidToAbstract.class
java PmidToAbstract
chmod 775 pmid_*

echo  Backup the current table as old_cg_pardi_uid_pmid_abstract
psql -d pardi -c "drop table if exists old_cg_pardi_uid_pmid_abstract;"
psql -d pardi -c "alter table cg_pardi_uid_pmid_abstract rename to old_cg_pardi_uid_pmid_abstract;"

psql -d pardi -c "create table public.cg_uid_pardi_pmid_abstract(uid varchar(30), pmid varchar(30), abstract_text text) tablespace cgdata_tbs;"

# Abstracts derived from eutils
echo  Drop the old table cg_uid_pmid_abstract_part1 which is generated by eutils API.
psql -d pardi -c "drop table if exists cg_uid_pmid_abstract_part1;"

echo Create a table and copy the part1 of the abstracts into a table in database.
psql -d pardi -c "create table cg_uid_pmid_abstract_part1(uid varchar(30), pmid Integer, abstract_text text) tablespace cgdata_tbs;"
psql -d pardi -c "\copy cg_uid_pmid_abstract_part1 from '/pardidata1/CG/CG_ABSTRACT_EXTRACTOR/pmid_with_abstract.txt';"

# abstract derived from wos table
echo  Copy the pmid without abstracts file into the table cg_pmid_without_abstract in database.
psql -d pardi -c "drop table if exists cg_pmid_without_abstract;"
psql -d pardi -c "create table cg_pmid_without_abstract(uid varchar(30), pmid integer) tablespace cgdata_tbs;"
psql -d pardi -c "\copy cg_pmid_without_abstract from '/pardidata1/CG/CG_ABSTRACT_EXTRACTOR/pmid_without_abstract.txt';"

echo  Generate the table cg_uid_pmid_wos_abstract_mapping_unmerged
psql -d pardi -c "drop table if exists cg_uid_pmid_wos_abstract_mapping_unmerged ;"
psql -d pardi -c "create table cg_uid_pmid_wos_abstract_mapping_unmerged tablespace cgdata_tbs as select distinct a.uid, a.pmid, b.wos_uid, c.abstract_text from cg_pmid_without_abstract a
left join wos_pmid_mapping b
on a.pmid=b.pmid_int
left join wos_abstracts c
on b.wos_uid = c.source_id;"


echo cg_uid_pmid_abstract_part2 is created by merging the abstract_text if needed.
psql -d pardi -c "drop table if exists cg_uid_pmid_abstract_part2;"
psql -d pardi -c "create table cg_uid_pmid_abstract_part2 tablespace cgdata_tbs as select distinct uid,pmid, array_to_string(array_agg(abstract_text),' ')
from cg_uid_pmid_wos_abstract_mapping_unmerged
where abstract_text is not null
group by uid,pmid ;"


echo Create final updated version cg_uid_pmid_abstract
psql -d pardi -c "Insert into public.cg_pardi_uid_pmid_abstract
select * from cg_uid_pmid_abstract_part1
union
select * from cg_uid_pmid_abstract_part2;"

echo _____ CLEANING INTERMEDIATE TABLES ____
psql -d pardi -c "drop table if exists cg_pmid_without_abstract;"
psql -d pardi -c "drop table if exists cg_uid_pmid_wos_abstract_mapping_unmerged ;"
psql -d pardi -c "drop table if exists cg_uid_pmid_abstract_part1"
psql -d pardi -c "drop table if exists cg_uid_pmid_abstract_part2"

echo ______ D O N E ______
