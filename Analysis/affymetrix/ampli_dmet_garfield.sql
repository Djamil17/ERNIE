-- Script to generate csv files for import into neo4j
-- This is the affymetrix case study tracing the affy seedset of <= 1991 to the DMET Plus
-- Panel of 2017
-- Author: George Chacko 2/20/2018

-- End point is the garfield_hgraph series, which contains 23 wos_ids from Garfield's microarray historiograph
-- Starting point is all papers identified in a keyword search in PubMed for DMET PLus
-- Publications are connected/related by citation. The target is cited by the source.

-- Citation endpoint is 23 pubs in the garfield_historiograph (9 if restriected to pre-1992)
DROP TABLE IF EXISTS garfield_hgraph_end;
CREATE TABLE garfield_hgraph_end AS
SELECT source_id, publication_year 
FROM wos_publications WHERE source_id IN 
(select distinct wos_id from garfield_hgraph2) AND
publication_year <= 1992;

-- get first gen of citing references (using the cited verb, citing is source and cited is target)
-- the subquery here handles this

DROP TABLE IF EXISTS garfield_gen1;
CREATE TABLE garfield_gen1 AS
SELECT source_id AS source, cited_source_uid AS target,
'source'::varchar(10) AS stype, 'endref'::varchar(10) AS ttype
FROM wos_references WHERE cited_source_uid IN
(select source_id from garfield_hgraph_end);
CREATE INDEX garfield_gen1_idx ON garfield_gen1(source);
ANALYZE garfield_gen1;

-- get second gen of citing references (similarly)
DROP TABLE IF EXISTS garfield_gen2;
CREATE TABLE garfield_gen2 AS
SELECT source_id AS source, cited_source_uid AS target,
'source'::varchar(10) AS stype, 'target'::varchar(10) AS ttype
FROM wos_references WHERE cited_source_uid IN
(select source from garfield_gen1);
CREATE INDEX garfield_gen2_idx ON garfield_gen2(source);

--Citation starting point ONE is publications DMET Plus keyword search with curation
-- get one generation of cited references
-- garfield_dmet3 is generated by the garfield_dmet_down.sql script.
-- garfield_ampli3 is generated by the garfield_ampli_down.sql script

DROP TABLE IF EXISTS garfield_dmet_begina;
CREATE TABLE garfield_dmet_begina AS
SELECT source_id AS source, cited_source_uid AS target,
'startref1'::varchar(10) AS stype, 'target'::varchar(10) AS ttype
FROM wos_references WHERE source_id IN 
(select wos_id from garfield_dmet3);
CREATE INDEX garfield_dmet_begina_idx on garfield_dmet_begina(target);

--Citation starting point TWO is publications Amplichip keyword search
-- get one generation of cited references

DROP TABLE IF EXISTS garfield_ampli_begina;
CREATE TABLE garfield_ampli_begina AS
SELECT source_id AS source, cited_source_uid AS target,
'startref2'::varchar(10) AS stype, 'target'::varchar(10) AS ttype
FROM wos_references WHERE source_id IN 
(select wos_id from garfield_ampli3);
CREATE INDEX garfield_ampli_begina_idx on garfield_ampli_begina(target);

-- Inner join on wos_pubs to get only viable references (complete WoS Ids)
DROP TABLE IF EXISTS garfield_dmet_begin;
CREATE TABLE garfield_dmet_begin AS
SELECT a.* FROM garfield_dmet_begina a INNER JOIN
wos_publications b ON a.target=b.source_id;

DROP TABLE IF EXISTS garfield_ampli_begin;
CREATE TABLE garfield_ampli_begin AS
SELECT a.* FROM garfield_ampli_begina a INNER JOIN
wos_publications b ON a.target=b.source_id;

-- at this stage we have two starting points for a citation trail that are labeled startref1(dmet) and startref2(ampli)
-- garfield_dmet_begin & garfield_ampli_begin

-- begin node list assembly process.
DROP TABLE IF EXISTS garfield_node_assembly;
CREATE TABLE  garfield_node_assembly(node varchar(19),
ntype varchar(10));

--build node_table
--gen1
INSERT INTO garfield_node_assembly(node,ntype) 
SELECT DISTINCT source,stype
FROM garfield_gen1;

INSERT INTO garfield_node_assembly(node,ntype) 
SELECT DISTINCT target,ttype
FROM garfield_gen1;

--gen2
INSERT INTO garfield_node_assembly(node,ntype) 
SELECT DISTINCT source,stype
FROM garfield_gen2;

INSERT INTO garfield_node_assembly(node,ntype) 
SELECT DISTINCT target,ttype
FROM garfield_gen2;

--garfield_dmet_begin
INSERT INTO garfield_node_assembly(node,ntype) 
SELECT DISTINCT source,stype
FROM garfield_dmet_begin;

INSERT INTO garfield_node_assembly(node,ntype) 
SELECT DISTINCT target,ttype
FROM garfield_dmet_begin;

--garfield_ampli_begin
INSERT INTO garfield_node_assembly(node,ntype) 
SELECT DISTINCT source,stype
FROM garfield_ampli_begin;

INSERT INTO garfield_node_assembly(node,ntype) 
SELECT DISTINCT target,ttype
FROM garfield_ampli_begin;

CREATE INDEX garfield_node_assembly_idx ON garfield_node_assembly(node);

DROP TABLE IF EXISTS garfield_nodelist;
CREATE TABLE garfield_nodelist AS
SELECT DISTINCT * FROM garfield_node_assembly;

--build edge_table
DROP TABLE IF EXISTS garfield_edge_table;
CREATE TABLE garfield_edge_table(source varchar(19), target varchar(19),
stype varchar(10),ttype varchar(10));

INSERT INTO garfield_edge_table SELECT source, target, stype, ttype
FROM garfield_gen1;

INSERT INTO garfield_edge_table SELECT source, target, stype, ttype
FROM garfield_gen2;

INSERT INTO garfield_edge_table SELECT source, target, stype, ttype
FROM garfield_dmet_begin;

INSERT INTO garfield_edge_table SELECT source, target, stype, ttype
FROM garfield_ampli_begin;
CREATE INDEX garfield_edge_table_idx ON garfield_edge_table(source,target);

DROP TABLE IF EXISTS garfield_edgelist;
CREATE TABLE garfield_edgelist AS
SELECT DISTINCT * FROM garfield_edge_table
ORDER BY source,target;
CREATE INDEX garfield_edgelist_idx ON garfield_edgelist(source,target);

-- create formatted nodelist with unique node_ids
DROP TABLE IF EXISTS garfield_nodelist_formatted_a;
CREATE TABLE garfield_nodelist_formatted_a (node varchar(19), ntype varchar(15), endpoint varchar(10));
INSERT INTO garfield_nodelist_formatted_a (node,ntype) SELECT DISTINCT * FROM garfield_nodelist;			   
UPDATE garfield_nodelist_formatted_a SET endpoint='startref1' WHERE ntype='startref1';
UPDATE garfield_nodelist_formatted_a SET endpoint='startref2' WHERE ntype='startref2';
UPDATE garfield_nodelist_formatted_a SET endpoint='endref'    WHERE ntype='endref';
UPDATE garfield_nodelist_formatted_a SET ntype='wos_id';


DROP TABLE IF EXISTS garfield_nodelist_formatted_b;
CREATE TABLE garfield_nodelist_formatted_b AS
SELECT DISTINCT node, ntype, endpoint FROM garfield_nodelist_formatted_a;
CREATE INDEX garfield_nodelist_formatted_b_idx ON garfield_nodelist_formatted_b(node);

DROP TABLE IF EXISTS garfield_nodelist_formatted_b_pmid;
CREATE TABLE garfield_nodelist_formatted_b_pmid AS
SELECT a.*,b.pmid_int FROM garfield_nodelist_formatted_b a 
LEFT JOIN wos_pmid_mapping b ON a.node=b.wos_id;

DROP TABLE IF EXISTS garfield_nodelist_formatted_b_pmid_grants;
CREATE TABLE garfield_nodelist_formatted_b_pmid_grants AS
SELECT
  a.*,
  EXISTS(SELECT 1
         FROM exporter_publink b
         WHERE a.pmid_int = b.pmid :: INT AND substring(b.project_number, 4, 2) = 'DA') AS nida_support,
  EXISTS(SELECT 1
         FROM exporter_publink b
         WHERE a.pmid_int = b.pmid :: INT AND substring(b.project_number, 4, 2) <> 'DA') AS other_hhs_support
FROM chackoge.garfield_nodelist_formatted_b_pmid a;
CREATE INDEX garfield_nodelist_formatted_b_pmid_grants_idx on garfield_nodelist_formatted_b_pmid_grants(node);

DROP TABLE IF EXISTS garfield_nodelist_formatted_c_pmid_grants;
CREATE TABLE garfield_nodelist_formatted_c_pmid_grants AS
SELECT DISTINCT a.*,b.publication_year FROM garfield_nodelist_formatted_b_pmid_grants a
LEFT JOIN wos_publications b ON a.node=b.source_id;
CREATE INDEX garfield_nodelist_formatted_c_pmid_grants_idx on garfield_nodelist_formatted_c_pmid_grants(node);

DROP TABLE IF EXISTS garfield_nodelist_final;
CREATE TABLE garfield_nodelist_final AS
SELECT DISTINCT node, ntype, endpoint, nida_support, other_hhs_support, publication_year 
FROM garfield_nodelist_formatted_c_pmid_grants;

CREATE INDEX garfield_nodelist_final_idx ON garfield_nodelist_final(node);

-- remove duplicate rows
DROP TABLE IF EXISTS garfield_dupe_node_deletes;
CREATE TABLE garfield-duple_node_deletes AS
SELECT * from garfield_nodelist_final ou 
WHERE (select count(*) from garfield_nodelist_final inr where inr.node = ou.node)  > 1  
AND endpoint IS NULL order by node;

DELETE FROM garfield_nodelist_final WHERE node IN (select node from garfield_nodelist_final ou
where (select count(*) from garfield_nodelist_final inr
where inr.node = ou.node) > 1 order by node) AND endpoint IS NULL;

DELETE  FROM garfield_edgelist ou WHERE (select count(*) from garfield_edgelist inr
 where inr.source= ou.source and inr.target=ou.target) > 1
AND stype='source' AND ttype='target' ;

-- adding a citation count column to nodelist

DROP TABLE IF EXISTS garfield_node_citation_a;
CREATE TABLE garfield_node_citation_a AS 
SELECT a.node,count(b.source_id) AS total_citation_count 
FROM garfield_nodelist_final a LEFT JOIN wos_references b 
ON  a.node=b.cited_source_uid group by a.node;

DROP TABLE IF EXISTS garfield_nodelist_final_citation;
CREATE TABLE garfield_nodelist_final_citation AS
SELECT DISTINCT a.*,b.total_citation_count 
FROM garfield_nodelist_final a 
LEFT JOIN garfield_node_citation_a b 
ON a.node=b.node;

-- copy tables to /tmp for import
COPY (
  SELECT node AS "wos_id:ID",
         ntype AS "ntype:string",
	 endpoint AS "endpoint:string",
--    CAST(startref = '1' AS text) AS "startref:boolean",
--    CAST(endref = '1' AS text) AS "endref:boolean",
    CAST(nida_support AS text) AS "nida_support:boolean",
    CAST(other_hhs_support AS text) AS "other_hhs_support:boolean",
    publication_year AS "publication_year:int",
    total_citation_count AS "total_citations:int"
  FROM chackoge.garfield_nodelist_final_citation
) TO '/tmp/garfield_nodelist_final.csv' WITH (FORMAT CSV, HEADER);

COPY (
  SELECT source AS ":START_ID",
    target AS ":END_ID"
  FROM chackoge.garfield_edgelist
) TO '/tmp/garfield_edgelist_final.csv' WITH (FORMAT CSV, HEADER);
